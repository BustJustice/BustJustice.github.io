<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>use strict有哪些影响</title>
      <link href="/2019/08/24/use-strict%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BD%B1%E5%93%8D/"/>
      <url>/2019/08/24/use-strict%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>详见：阮一峰日志<br><a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html</a></p><h3 id="常见影响"><a href="#常见影响" class="headerlink" title="常见影响"></a>常见影响</h3><p>1.使用变量必须显示声明var let<br>2.禁止with语句<br>3.创建eval作用域<br>4.禁止this指向全局对象<br>5.禁止删除变量<br>6.不得重名属性方法<br>7.禁止八进制表示<br>8.对arguments对象限制<br>9.严格模式新增了一些保留字：<br>  implements, interface, let, package, private, protected, public, static, yield。<br>  使用这些词作为变量名将会报错。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符优先级</title>
      <link href="/2019/08/24/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2019/08/24/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title> 网络攻击的几种方式</title>
      <link href="/2019/08/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/08/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="DNS欺骗-域名污染"><a href="#DNS欺骗-域名污染" class="headerlink" title="DNS欺骗(域名污染)"></a>DNS欺骗(域名污染)</h4><p>简单的说就是改变了域名解析指向的IP地址<br>详情见：<a href="https://blog.csdn.net/qq754406613/article/details/43649007" target="_blank" rel="noopener">https://blog.csdn.net/qq754406613/article/details/43649007</a></p><h4 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h4><p>简单的说就是通过插入恶意脚本，实现对用户游览器的控制。<br>详情见：<a href="https://www.cnblogs.com/bangerlee/archive/2013/04/06/3002142.html" target="_blank" rel="noopener">https://www.cnblogs.com/bangerlee/archive/2013/04/06/3002142.html</a></p><h4 id="DDos攻击"><a href="#DDos攻击" class="headerlink" title="DDos攻击"></a>DDos攻击</h4><p>详情见：<a href="https://www.cnblogs.com/2myroad/articles/3881042.html" target="_blank" rel="noopener">https://www.cnblogs.com/2myroad/articles/3881042.html</a><br>SYN Flood攻击利用了TCP三次握手的缺陷，能够以较小代价使目标服务器无法响应<br>DNS Query Flood就是攻击者操纵大量傀儡机器，对目标发起海量的域名查询请求。<br>HTTP Flood（CC攻击）攻击者通过匿名代理对攻击目标发起HTTP请求。</p><h4 id="域名劫持"><a href="#域名劫持" class="headerlink" title="域名劫持"></a>域名劫持</h4><p>详情见：<a href="https://www.jb51.net/network/353770.html" target="_blank" rel="noopener">https://www.jb51.net/network/353770.html</a><br>域名服务器上都会保存一大堆的域名记录（每条记录包含“域名”和“IP地址”）。<br>当收到域名查询的时候，域名服务器会从这堆记录中找到对方想要的，然后回应给对方。<br>如果域名服务器上的某条记录被【人为修改】了（改成错的），<br>那么一旦要查询这条记录，得到的就是错误的结果。这种情况称之为“域名劫持”。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原生ajax和JQuery_ajax</title>
      <link href="/2019/08/24/%E5%8E%9F%E7%94%9Fajax%E5%92%8CJQuery-ajax/"/>
      <url>/2019/08/24/%E5%8E%9F%E7%94%9Fajax%E5%92%8CJQuery-ajax/</url>
      
        <content type="html"><![CDATA[<h5 id="这篇博客也不错"><a href="#这篇博客也不错" class="headerlink" title="这篇博客也不错"></a>这篇博客也不错</h5><p><a href="https://blog.csdn.net/weixin_42387953/article/details/83040751" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42387953/article/details/83040751</a></p><h3 id="原生js"><a href="#原生js" class="headerlink" title="原生js"></a>原生js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//发送异步请求</span></span><br><span class="line">  <span class="comment">//1.创建ajax引擎对象---所有的操作由ajax引擎完成</span></span><br><span class="line">  <span class="keyword">var</span> xmlHttp = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">//为引擎绑定事件监听事件</span></span><br><span class="line">  xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlHttp.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xmlHttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> data = xmlHttp.responseText</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"失败"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.绑定服务器地址</span></span><br><span class="line">  <span class="comment">//第一个参数GET/POST</span></span><br><span class="line">  <span class="comment">//第二个参数后台服务器地址</span></span><br><span class="line">  <span class="comment">//第三个参数：是否异步, 默认为true, 是异步</span></span><br><span class="line">  xmlHttp.open(<span class="string">'GET'</span>,<span class="string">"https://www.baidu.com&amp;root=1"</span>)</span><br><span class="line">  <span class="comment">//发送请求</span></span><br><span class="line">  xmlHttp.send()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">"https:www.baidu.com"</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    data: <span class="string">'user=list&amp;email=111@163.com'</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'success'</span>,res)</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'false'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>状态吗</title>
      <link href="/2019/08/23/%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2019/08/23/%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="状态码-虽然是个小细节，但也不可大意"><a href="#状态码-虽然是个小细节，但也不可大意" class="headerlink" title="状态码(虽然是个小细节，但也不可大意)"></a>状态码(虽然是个小细节，但也不可大意)</h4><h4 id="本体链接"><a href="#本体链接" class="headerlink" title="本体链接"></a>本体链接</h4><p><a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-status-codes.html</a></p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><table><thead><tr><th>状态码</th><th>英文说明</th><th>中文说明</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>block&amp;inline&amp;inline-block</title>
      <link href="/2019/08/23/block-inline-inline-block/"/>
      <url>/2019/08/23/block-inline-inline-block/</url>
      
        <content type="html"><![CDATA[<h2 id="block元素"><a href="#block元素" class="headerlink" title="block元素"></a>block元素</h2><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>address</td><td>定义地址</td></tr><tr><td>caption</td><td>定义表格标题</td></tr><tr><td>dd</td><td>定义列表中定义条目</td></tr><tr><td>div</td><td>定义文档分区</td></tr><tr><td>dl</td><td>定义列表</td></tr><tr><td>dt</td><td>定义列表项目</td></tr><tr><td>fieldset</td><td>定义一个框架集</td></tr><tr><td>form</td><td>定义表单</td></tr><tr><td>h1-h6</td><td>文字大小</td></tr><tr><td>hr</td><td>水平线</td></tr><tr><td>legend</td><td>元素为fieldset元素定义标题</td></tr><tr><td>li</td><td>定义列表项目</td></tr><tr><td>noframes</td><td>frames可选内容</td></tr><tr><td>noscript</td><td>可选脚本内容</td></tr><tr><td>ol</td><td>有序列表</td></tr><tr><td>ul</td><td>无序列表</td></tr><tr><td>p</td><td>定义段落</td></tr><tr><td>pre</td><td>定义预格式化文本</td></tr><tr><td>table</td><td>定义表格</td></tr><tr><td>tbody</td><td>表格主题</td></tr><tr><td>td</td><td>标准单元格</td></tr><tr><td>tfoot</td><td>页脚</td></tr><tr><td>th</td><td>定义表头单元格</td></tr><tr><td>thead</td><td>定义表头单元格</td></tr><tr><td>tr</td><td>定义表格行</td></tr></tbody></table><h2 id="inline元素"><a href="#inline元素" class="headerlink" title="inline元素"></a>inline元素</h2><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>定义锚</td></tr><tr><td>abbr</td><td>表示缩写</td></tr><tr><td>acronym</td><td>定义指取首字母缩写</td></tr><tr><td>b</td><td>字体加粗</td></tr><tr><td>bdo</td><td>可覆盖默认的文本方向</td></tr><tr><td>big</td><td>大号字体加粗</td></tr><tr><td>br</td><td>换行</td></tr><tr><td>cite</td><td>引用进行定义</td></tr><tr><td>code</td><td>定义计算机代码文本</td></tr><tr><td>dfn</td><td>定义一个定义项目</td></tr><tr><td>em</td><td>定义为强调的内容</td></tr><tr><td>i</td><td>斜体文本效果</td></tr><tr><td>img</td><td>向网页中嵌入一幅图像</td></tr><tr><td>input</td><td>输入框</td></tr><tr><td>kbd</td><td>定义键盘文本</td></tr><tr><td>label</td><td>标签为 input 元素定义标注（标记）</td></tr><tr><td>q</td><td>定义短的引用</td></tr><tr><td>samp</td><td>定义样本文本</td></tr><tr><td>select</td><td>创建单选或多选菜单</td></tr><tr><td>small</td><td>呈现小号字体效果</td></tr><tr><td>span</td><td>组合文档中的行内元素</td></tr><tr><td>strong</td><td>语气更强的强调的内容</td></tr><tr><td>sub</td><td>定义下标文本</td></tr><tr><td>sup</td><td>定义上标文本</td></tr><tr><td>textarea</td><td>多行的文本输入控件</td></tr><tr><td>tt</td><td>打字机或者等宽的文本效果</td></tr><tr><td>var</td><td>定义变量</td></tr></tbody></table><h2 id="inline-block元素（也被称做可置换元素，但还是算成行内）"><a href="#inline-block元素（也被称做可置换元素，但还是算成行内）" class="headerlink" title="inline-block元素（也被称做可置换元素，但还是算成行内）"></a>inline-block元素（也被称做可置换元素，但还是算成行内）</h2><p>img|input|select|textarea|button等，也被称为可置换元素（Replaced element）。</p><h4 id="inline-block特性"><a href="#inline-block特性" class="headerlink" title="inline-block特性"></a>inline-block特性</h4><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p><h4 id="行内元素特点"><a href="#行内元素特点" class="headerlink" title="行内元素特点"></a>行内元素特点</h4><p>（1）和相邻行内元素在一行上。<br>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br>（3）默认宽度就是它本身内容的宽度。<br>（4）行内元素只能容纳文本或则其他行内元素。（a特殊 a里面可以放块级元素 ）</p><h4 id="块级元素特点"><a href="#块级元素特点" class="headerlink" title="块级元素特点"></a>块级元素特点</h4><p>（1）总是从新行开始<br>（2）高度，行高、外边距以及内边距都可以控制。<br>（3）宽度默认是容器的100%<br>（4）可以容纳内联元素和其他块元素。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的伪类伪元素</title>
      <link href="/2019/08/23/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BC%AA%E7%B1%BB%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
      <url>/2019/08/23/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BC%AA%E7%B1%BB%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p><img src="https://s2.ax1x.com/2019/08/23/mDFthj.png" alt="mDFthj.png"></p><h2 id="伪元素（常用）"><a href="#伪元素（常用）" class="headerlink" title="伪元素（常用）"></a>伪元素（常用）</h2><p>:before 该伪元素定义在元素之前添加内容</p><p>:after 该伪元素定义在元素之后添加内容</p><p>:first-line 该伪元素向文本的首行添加特殊样式</p><p>:first-letter 该伪元素向文本的第一个字母添加特殊样式</p><p>这四种伪元素都是在平常写代码的时候比较常用的元素。</p><p>区别:<br>简单来说，就是伪元素添加了不在DOM数之外的虚拟容器，<br>而伪类就是个类，和.class的优先级相同</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3与HTML5新增标签</title>
      <link href="/2019/08/22/CSS3%E4%B8%8EHTML5%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/08/22/CSS3%E4%B8%8EHTML5%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>###HTML5新增标签</p><table><thead><tr><th>新增元素</th><th>说明</th></tr></thead><tbody><tr><td>video</td><td>表示一段视频并且提供播放的用户界面</td></tr><tr><td>audio</td><td>表示音频</td></tr><tr><td>canvas</td><td>表示位图区域 (就是块级元素，勿虑)</td></tr><tr><td>source</td><td>为video和audio提供数据源</td></tr><tr><td>track</td><td>为video和audio指定字母</td></tr><tr><td>svg</td><td>定义矢量图</td></tr><tr><td>code</td><td>代码段</td></tr><tr><td>figure</td><td>和文档有关的图例</td></tr><tr><td>figcaption</td><td>图例的说明</td></tr><tr><td>main</td><td>主内容区</td></tr><tr><td>time</td><td>日期和时间值</td></tr><tr><td>mark</td><td>高亮的引用文字</td></tr><tr><td>datalist</td><td>提供给其他空间的预定义选项</td></tr><tr><td>keygen</td><td>密钥对生成器空间</td></tr><tr><td>output</td><td>计算值</td></tr><tr><td>progress</td><td>进度条</td></tr><tr><td>menu</td><td>菜单</td></tr><tr><td>embed</td><td>嵌入的外部资源</td></tr><tr><td>menuitem</td><td>用户可以点击的菜单项</td></tr><tr><td>menu</td><td>菜单</td></tr><tr><td>template</td><td>声明是模块元素</td></tr><tr><td>section</td><td>独立内容区块</td></tr><tr><td>nav</td><td>导航条部分信息</td></tr><tr><td>aside</td><td>标签内容之外的与标签内容相关的辅助信息</td></tr><tr><td>article</td><td>特殊独立区块表示这篇页眉的核心内容</td></tr><tr><td>footer/header</td><td>底部信息/头部信息</td></tr></tbody></table><p>###CSS3<br>CSS3被划分成模块，最重要的几个模块包括：选择器，框模型，<br>背景和边框，文本效果，2D3D转换，动画，多列布局，用户界面 </p><ul><li>选择器</li><li>框模型</li><li>背景和边框<br>  border-radius,box-shadow,border-image<br>  background-size:规定背景图片的尺寸<br>  background-origin:规定背景图片的定位区域<br>  background-clip:规定背景的绘制区域</li><li>文本效果（常用）<br>  text-shadow:设置文字阴影<br>  word-wrap:强制换行<br>  word-break<br>  css3提出@font-face规则，规则中定义了font-family，font-weight，<br>  font-style，font-stretch，src，unicode-range</li><li>2D3D转换<br>  transform：向元素应用2/3D转换<br>  transition：过渡</li><li>动画</li><li>@keyframes规则<br>  animation，animation-name，animation-duration</li><li>用户界面（常用）<br>  box-sizeing，resize<br>####css3新增伪类<br>  : nth-child<br>  : nth-last-child()<br>  : only-child<br>  : last-child<br>  : nth-of-type()<br>  : only-of-type()<br>  : empty<br>  : target这个伪类允许我们选择基于URL的元素如果这个元素有一个识别器<br>  （#target）那么这个:target就会对这个ID识别器的元素增加样式<br>  : enabled<br>  : disabled<br>  : checked<br>  : not<br>###H5不再支持的标签<br>  1.acronym （建议abbr）：定义首字母缩写<br>  2.applet （建议object）：定义applet<br>  3.basefont(使用css控制)<br>  4.big(使用css控制)：定义大号文本<br>  5.center（使用css控制）：定义居中文本<br>  6.font（使用css控制）<br>  7.strike(使用del):定义加删除线的文本<br>  8.tt(使用css控制)：定义打字机文本<br>  9.u(使用css控制)：定义下划线文本<br>  10.frame(建议iframe):定义子窗口<br>  11.frameset：定义框架的集<br>  12.noframes：定义noframe部分<br>  13.dir:定义目录列表<br>  14.xmp:定义预格式文本<br>  15.isindex：定义单行的输入域</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS优先级</title>
      <link href="/2019/08/21/CSS%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2019/08/21/CSS%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>CSS 优先规则1： 最近的祖先样式比其他祖先样式优先级高。<br>CSS 优先规则2：”直接样式”比”祖先样式”优先级高。<br>CSS 优先规则3：优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器<br>CSS 优先规则4：计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照”就近原则”来判断。<br>CSS 优先规则5：属性后插有 !important 的属性拥有最高优先级。若同时插有 !important，则再利用规则 3、4 判断优先级。</p><p>PS:虽然!important很强大，但是继承来的话应该遵守规则2<br><img src="https://s2.ax1x.com/2019/08/23/mBKQtf.png" alt="mBKQtf.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#grandfather</span>&#123;</span></span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line">            color: black !important;</span><br><span class="line">        &#125;</span><br><span class="line">        h2&#123;</span><br><span class="line">            color: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-attr">[class="content"]</span>&#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#child</span>&#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"grandfather"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"child"</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>字体颜色最终为<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary08</title>
      <link href="/2019/08/18/Summary08/"/>
      <url>/2019/08/18/Summary08/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary07</title>
      <link href="/2019/08/18/Summary07/"/>
      <url>/2019/08/18/Summary07/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary06</title>
      <link href="/2019/08/18/Summary06/"/>
      <url>/2019/08/18/Summary06/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary05</title>
      <link href="/2019/08/15/Summary05/"/>
      <url>/2019/08/15/Summary05/</url>
      
        <content type="html"><![CDATA[<h2 id="事件循环模型"><a href="#事件循环模型" class="headerlink" title="事件循环模型"></a>事件循环模型</h2><p><img src="https://s2.ax1x.com/2019/08/15/mEBrUx.png" alt="mEBrUx.png"></p><h3 id="模型的运转流程"><a href="#模型的运转流程" class="headerlink" title="模型的运转流程"></a>模型的运转流程</h3><ul><li>执行初始化代码, 将事件回调函数交给对应模块管理</li><li>当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary04</title>
      <link href="/2019/08/15/Summary04/"/>
      <url>/2019/08/15/Summary04/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><h4 id="方式1-原型链继承"><a href="#方式1-原型链继承" class="headerlink" title="方式1: 原型链继承"></a>方式1: 原型链继承</h4><ol><li>套路<ol><li>定义父类型构造函数</li><li>给父类型的原型添加方法</li><li>定义子类型的构造函数</li><li>创建父类型的对象赋值给子类型的原型<br>（PS:A-&gt;object变为A-&gt;B-&gt;object）</li><li>将子类型原型的构造属性设置为子类型</li><li>给子类型原型添加方法</li><li>创建子类型的对象: 可以调用父类型的方法</li></ol></li><li>关键<ol><li>子类型的原型为父类型的一个实例对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类型</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Supper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.supProp = <span class="string">'Supper property'</span></span><br><span class="line"> &#125;</span><br><span class="line"> Supper.prototype.showSupperProp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.supProp)</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//子类型</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.subProp = <span class="string">'Sub property'</span></span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 子类型的原型为父类型的一个实例对象</span></span><br><span class="line"> Sub.prototype = <span class="keyword">new</span> Supper()</span><br><span class="line"> <span class="comment">// 让子类型的原型的constructor指向子类型</span></span><br><span class="line"> Sub.prototype.constructor = Sub</span><br><span class="line"> Sub.prototype.showSubProp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.subProp)</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">var</span> sub = <span class="keyword">new</span> Sub()</span><br><span class="line"> sub.showSupperProp()</span><br><span class="line"> <span class="comment">// sub.toString()</span></span><br><span class="line"> sub.showSubProp()</span><br><span class="line">  </span><br><span class="line"> <span class="built_in">console</span>.log(sub)  <span class="comment">// Sub</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h4 id="方式2-借用构造函数继承-假继承"><a href="#方式2-借用构造函数继承-假继承" class="headerlink" title="方式2: 借用构造函数继承(假继承)"></a>方式2: 借用构造函数继承(假继承)</h4><ol><li>套路:<ol><li>定义父类型构造函数</li><li>定义子类型构造函数</li><li>在子类型构造函数中调用父类型构造</li></ol></li><li>关键:<ol><li>在子类型构造函数中通用call()调用父类型构造函数</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, price</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)  <span class="comment">// 相当于: this.Person(name, age)</span></span><br><span class="line">  <span class="comment">//借鸡生蛋</span></span><br><span class="line">  <span class="comment">/*this.name = name</span></span><br><span class="line"><span class="comment">  this.age = age*/</span></span><br><span class="line">  <span class="keyword">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">'Tom'</span>, <span class="number">20</span>, <span class="number">14000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.name, s.age, s.price)</span><br></pre></td></tr></table></figure><hr><h4 id="方式3-原型链-借用构造函数的组合继承"><a href="#方式3-原型链-借用构造函数的组合继承" class="headerlink" title="方式3: 原型链+借用构造函数的组合继承"></a>方式3: 原型链+借用构造函数的组合继承</h4><ol><li>利用原型链实现对父类型对象的方法继承</li><li>利用super()借用父类型构建函数初始化相同属性<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">   this<span class="selector-class">.name</span> = name</span><br><span class="line">   this<span class="selector-class">.age</span> = age</span><br><span class="line"> &#125;</span><br><span class="line"> Person<span class="selector-class">.prototype</span><span class="selector-class">.setName</span> = function (name) &#123;</span><br><span class="line">   this<span class="selector-class">.name</span> = name</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> function Student(name, age, price) &#123;</span><br><span class="line">   Person.call(this, name, age)  <span class="comment">// 为了得到属性</span></span><br><span class="line">   this<span class="selector-class">.price</span> = price</span><br><span class="line"> &#125;</span><br><span class="line"> Student<span class="selector-class">.prototype</span> = new Person() <span class="comment">// 为了能看到父类型的方法</span></span><br><span class="line"> Student<span class="selector-class">.prototype</span><span class="selector-class">.constructor</span> = Student <span class="comment">//修正constructor属性</span></span><br><span class="line"> Student<span class="selector-class">.prototype</span><span class="selector-class">.setPrice</span> = function (price) &#123;</span><br><span class="line">   this<span class="selector-class">.price</span> = price</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="selector-tag">var</span> s = new Student(<span class="string">'Tom'</span>, <span class="number">24</span>, <span class="number">15000</span>)</span><br><span class="line"> s.setName(<span class="string">'Bob'</span>)</span><br><span class="line"> s.setPrice(<span class="number">16000</span>)</span><br><span class="line"> console.log(s<span class="selector-class">.name</span>, s<span class="selector-class">.age</span>, s.price)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary03</title>
      <link href="/2019/08/15/Summary03/"/>
      <url>/2019/08/15/Summary03/</url>
      
        <content type="html"><![CDATA[<h2 id="创建对象模式"><a href="#创建对象模式" class="headerlink" title="创建对象模式"></a>创建对象模式</h2><h4 id="方式一-Object构造函数模式"><a href="#方式一-Object构造函数模式" class="headerlink" title="方式一: Object构造函数模式"></a>方式一: Object构造函数模式</h4><ul><li>套路: 先创建空Object对象, 再动态添加属性/方法</li><li>适用场景: 起始时不确定对象内部数据</li><li>问题: 语句太多<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span> = new Object()</span><br><span class="line"><span class="selector-tag">p</span> = &#123;&#125; <span class="comment">//此时内部数据是不确定的</span></span><br><span class="line"><span class="comment">// 再动态添加属性/方法</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.name</span> = <span class="string">'Tom'</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.age</span> = <span class="number">12</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.setName</span> = function (name) &#123;</span><br><span class="line">  this<span class="selector-class">.name</span> = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="方式二-对象字面量模式"><a href="#方式二-对象字面量模式" class="headerlink" title="方式二: 对象字面量模式"></a>方式二: 对象字面量模式</h4><ul><li>套路: 使用{}创建对象, 同时指定属性/方法</li><li>适用场景: 起始时对象内部数据是确定的</li><li>问题: 如果创建多个对象, 有重复代码<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">p</span> = &#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">12</span>,</span><br><span class="line">  setName: function (name) &#123;</span><br><span class="line">    this<span class="selector-class">.name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="方式三-工厂模式"><a href="#方式三-工厂模式" class="headerlink" title="方式三: 工厂模式"></a>方式三: 工厂模式</h4><ul><li>套路: 通过工厂函数动态创建对象并返回</li><li>适用场景: 需要创建多个对象</li><li>问题: 对象没有一个具体的类型, 都是Object类型<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> createPerson(<span class="keyword">name</span>, age) &#123; //返回一个对象的函数===&gt;工厂函数</span><br><span class="line">  var obj = &#123;</span><br><span class="line">    <span class="keyword">name</span>: <span class="keyword">name</span>,</span><br><span class="line">    age: age,</span><br><span class="line">    setName: <span class="function"><span class="keyword">function</span></span> (<span class="keyword">name</span>) &#123;</span><br><span class="line">      this.<span class="keyword">name</span> = <span class="keyword">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="方式四-自定义构造函数模式"><a href="#方式四-自定义构造函数模式" class="headerlink" title="方式四: 自定义构造函数模式"></a>方式四: 自定义构造函数模式</h4><ul><li>套路: 自定义构造函数, 通过new创建对象</li><li>适用场景: 需要创建多个类型确定的对象</li><li>问题: 每个对象都有相同的数据, 浪费内存<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那就把相同的属性提到原型上，大家公用一个<span class="keyword">object</span>原型好了</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="方式六-构造函数-原型的组合模式"><a href="#方式六-构造函数-原型的组合模式" class="headerlink" title="方式六: 构造函数+原型的组合模式"></a>方式六: 构造函数+原型的组合模式</h4><ul><li>套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上</li><li>适用场景: 需要创建多个类型确定的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123; <span class="comment">//在构造函数中只初始化一般函数</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1, p2)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary02</title>
      <link href="/2019/08/15/Summary02/"/>
      <url>/2019/08/15/Summary02/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包理解"><a href="#闭包理解" class="headerlink" title="闭包理解"></a>闭包理解</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span>&#123;</span></span><br><span class="line">    var <span class="built_in">i</span> = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span>&#123;</span></span><br><span class="line">        console.<span class="built_in">log</span>(++<span class="built_in">i</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>如何产生闭包?<ul><li>当一个嵌套的内部(子)函数引用了嵌套的外部(父)函数的变量(函数)时, 就产生了闭包</li></ul></li><li>闭包到底是什么?<ul><li>使用chrome调试查看</li><li>理解一: 闭包是嵌套的内部函数(绝大部分人)</li><li>理解二: 包含被引用变量(函数)的对象(极少数人)</li><li>注意: 闭包存在于嵌套的内部函数中</li></ul></li><li>产生闭包的条件?<ul><li>函数嵌套</li><li>内部函数引用了外部函数的数据(变量/函数)</li></ul></li></ol><hr><h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><ol><li>产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</li><li>死亡: 在嵌套的内部函数成为垃圾对象时</li></ol><hr><h3 id="问题及解决"><a href="#问题及解决" class="headerlink" title="问题及解决"></a>问题及解决</h3><ol><li>延长了局部变量的生命周期，一不注意就变成了内存泄漏</li><li>及时释放将其置为null</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>总结js01</title>
      <link href="/2019/08/15/%E6%80%BB%E7%BB%93js01/"/>
      <url>/2019/08/15/%E6%80%BB%E7%BB%93js01/</url>
      
        <content type="html"><![CDATA[<iframe allowtransparency="yes" frameborder="0" width="100%" height="600px" src="/html/summary01.html"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>问题发现</title>
      <link href="/2019/08/14/%E9%97%AE%E9%A2%98%E5%8F%91%E7%8E%B0/"/>
      <url>/2019/08/14/%E9%97%AE%E9%A2%98%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>文字排版还有改进空间，<br>这是改变外观的首要任务</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/2019/08/13/%E9%9D%A2%E7%BB%8F/"/>
      <url>/2019/08/13/%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<pre><code>经历第一次比较正式的面试，主要是技术面。</code></pre><p>采用了两人一小时轮番提问的方式，说真的，比较累人。<br>    一回生，二回熟。第一次面试总结经验吧。<br>我觉得主要在考察1.你解决问题的思路。2.结果背后的原理。<br>事实上，我觉得考察的方向，不就在招聘的要求和自己的简历上<br>这些来源，加上可以查看往年的公司面试的问答，范围基本会被<br>圈定，再说技术面试真的考你完全不懂的问题（也有可能在试探你<br>知识的边界也说不定）。<br>    回忆一下，问了什么问题，Vue数据绑定原理，JQuery插件编写，<br>js函数运行的底层表现（栈：最底层window函数），页面显示过程，Ajax原生，<br>响应式，自适应原生，个人项目经历，个人简介，比较奇怪，<br>本以为会问JS三大特性，然而并没有。回调函数，做搜索框，<br>回头一看这些问题，不好好准备还真答不完整。<br>    如何应对接下来的面试，1.在上述选定的范围结合此次的面试问题<br>做下二度解决，抓紧继续回收自己的简历内容。<br>    后记：随着提前批的过去，正式批笔试面试多重，随着时间的前进<br>对招聘的难度也会上升，从而会有精力不足必须缩小范围。最好的结果<br>当然是找个优秀企业，努力准备，然后二面通关。毕竟人生苦短，不如<br>踏春风游万水千山，悠哉游哉。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文栈</title>
      <link href="/2019/08/09/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/"/>
      <url>/2019/08/09/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<pre><code>1. 代码分类(位置)  * 全局代码  * 函数(局部)代码2. 全局执行上下文  * 在执行全局代码前将window确定为全局执行上下文  * 对全局数据进行预处理    * var定义的全局变量==&gt;undefined, 添加为window的属性    * function声明的全局函数==&gt;赋值(fun), 添加为window的方法    * this==&gt;赋值(window)  * 开始执行全局代码3. 函数执行上下文  * 在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象(虚拟的, 存在于栈中)  * 对局部数据进行预处理    * 形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性    * arguments==&gt;赋值(实参列表), 添加为执行上下文的属性    * var定义的局部变量==&gt;undefined, 添加为执行上下文的属性    * function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法    * this==&gt;赋值(调用函数的对象)  * 开始执行函数体代码进一步理解1. 在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象2. 在全局执行上下文(window)确定后, 将其添加到栈中(压栈)3. 在函数执行上下文创建后, 将其添加到栈中(压栈)4. 在当前函数执行完后,将栈顶的对象移除(出栈)5. 当所有的代码执行完后, 栈中只剩下window</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>复习巩固ES6</title>
      <link href="/2019/08/09/%E5%A4%8D%E4%B9%A0%E5%B7%A9%E5%9B%BAES6/"/>
      <url>/2019/08/09/%E5%A4%8D%E4%B9%A0%E5%B7%A9%E5%9B%BAES6/</url>
      
        <content type="html"><![CDATA[<pre><code>严格模式    * 必须用var声明变量    * 禁止自定义的函数中的this指向window    * 创建eval作用域    * 对象不能有重名的属性区分 call/apply/bind    * call()/apply()是立即调用函数    * bind()是将函数返回    * call()于bind()的传参方式一致，而apply是传数组let/const关键字    * 在块作用域内有效 //ES5函数作用域，全局作用域    * 不能重复声明    * 不会预处理, 不存在提升    * const除了赋值后值不能改变，其他相同let箭头函数    * () =&gt; {...} 等于 function(){...}    * 箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，      而是在定义的时候处在的对象就是它的this    * 扩展理解： 箭头函数的this看外层的是否有函数，      如果有，外层函数的this就是内部箭头函数的this，      如果没有，则this是window。      PS:因为被其他函数包裹的话，外层不执行，它是不会执行内部定义的，      函数是有作用域的。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原型链总结</title>
      <link href="/2019/08/08/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/08/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>图示如下<br><img src="https://s2.ax1x.com/2019/08/24/msjQ41.png" alt="msjQ41.png"><br>原型链总结四句话。<br>1.函数的原型对象的prototype是其实例对象的<em>proto</em><br>2.所有的函数对象，都是new Function()出来的（包括自身）<br>3.每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)（Object对象除外）<br>4.Object的原型对象的_proto_为null即原型链的尽头</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一小节js</title>
      <link href="/2019/08/07/%E7%AC%AC%E4%B8%80%E5%B0%8F%E8%8A%82js/"/>
      <url>/2019/08/07/%E7%AC%AC%E4%B8%80%E5%B0%8F%E8%8A%82js/</url>
      
        <content type="html"><![CDATA[<pre><code>1-基本数据类型/值类型    1.1-String    1.2-Boolean    1.3-Null    1.4-Undefined    1.5-Number2-对象数据类型/引用数据类型    2.1-Object    2.2-Array    2.3-Function3-typeof    3.1-可以判断 undefined,function,string,boolean,number    3.2-不能判断 null,object,array4-==    4.1-x和y都是null或undefined:规则: 没有隐式类型转换,无条件返回true    4.2-x或y是NaN : NaN与任何数字都不等规则：没有隐式类型转换，无条件返回false    4.3-x和y都是string，boolean，number规则：有隐式类型转换，会将不是number类型的数据转成number    4.4-x或y是复杂数据类型 : 会先获取复杂数据类型的原始值之后再左比较    4.5-x和y都是复杂数据类型 :规则只比较地址，如果地址一致则返回true，否则返回false5-Boolean    5.1-false +0-0 NaN undefined null &apos;&apos;空串 false document.all()    5.2-true6-instanceof    6.1-左边实例，右边构造函数7-===    7.1-类型与值完全一致8-Number转换    8.1-可以转换为1 true    8.2-转换为0 &quot;&quot;空串，false,&quot;0&quot;,null,[]    8.3-转换为NaN &quot;xxx&quot;,undefined,{},function10-其他符号 &lt; , &gt;, + 等转换    https://blog.csdn.net/itcast_cn/article/details/82887895</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="/2019/08/04/%E6%97%A0%E9%A2%98/"/>
      <url>/2019/08/04/%E6%97%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>外部引用图像<br><img src="https://s2.ax1x.com/2019/08/04/ey3Aun.jpg" alt="ey3Aun.jpg"><br>内嵌html</p><iframe allowtransparency="yes" frameborder="0" width="300" height="300" src="/html/flower.html"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网易笔试复习要点</title>
      <link href="/2019/08/02/%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/"/>
      <url>/2019/08/02/%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>为了应对网易笔试，而复习摘要回顾。<br>二叉树前中后遍历<br>根左右<br>左根右<br>左右根</p><p>完全二叉树与满二叉树</p><p>八种排序<br>冒泡 直接插入 简单选择 希尔排序 基数排序 堆排序 快速排序 归并排序<br>稳定排序 冒泡 直接插入 基数 归并<br>与初始序列无关 简单选择排序 归并排序 基数排序 堆排序 </p><p>css “-” 内联样式 峰驼法</p><p>正则<br>单词<br>/\bgood\b/<br>[a-zA-Z0-9]{1,5} * &gt;=0 + &gt;=1 .任意除了换行 </p><p>jsonp不可post请求，可以跨域</p><p>闭包，原型链，AO链</p><p>js单线程，先执行完毕，在执行队列任务</p><p>selection 内容分块，在article标签下</p><p>数组length不包括属性</p><p>var a = b = 3; 等于 b = 3; var a = b;</p><p>就这样。；。明天再说</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学长有话说</title>
      <link href="/2019/07/29/%E9%9D%A2%E5%90%91%E5%A4%A7%E4%BA%8C%E5%90%8C%E5%AD%A6%E7%9A%84%E7%A6%8F%E5%88%A9/"/>
      <url>/2019/07/29/%E9%9D%A2%E5%90%91%E5%A4%A7%E4%BA%8C%E5%90%8C%E5%AD%A6%E7%9A%84%E7%A6%8F%E5%88%A9/</url>
      
        <content type="html"><![CDATA[<p>   目前大二即将踏入大三的你，是否开始考虑起了未来的事。潇洒恣意的日子，晚上一起和好兄弟撸串的日子，还历历在目。真希望时光永远停在这一刻。<br><br>   就业还是考研，是大多数同学在大三，大四必须要面对的问题，但一般无论导师还是企业，都会要求你有实习项目的经验，正如是先有鸡，还是先有蛋一样。<br><br>   大多数同学没有被锻炼的机会，现在学长我也准备起了企业实习与招聘，光阴似水流，不经意间从手中溜走。有什么想问的，可以在##评论区留言##，想要导师推荐，我也可以帮你。<br><br>   —-微信：13735305008</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 就业 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单</title>
      <link href="/2019/07/29/%E8%A1%A8%E5%8D%95/"/>
      <url>/2019/07/29/%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>酝酿中，敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇</title>
      <link href="/2019/07/29/%E5%BC%80%E7%AF%87/"/>
      <url>/2019/07/29/%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最难的事是坚持下去</title>
      <link href="/2019/07/18/hello-world/"/>
      <url>/2019/07/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
